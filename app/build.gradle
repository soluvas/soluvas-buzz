apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'

dependencies {
	compile libraries.guava
	compile 'org.twitter4j:twitter4j-core:3.0.3'
	testCompile libraries.junit
	testCompile libraries.hamcrest
	//compile 'org.ow2.asm:asm-commons:4.1'
	//compile 'cglib:cglib-nodep:3.0'
	
	compile libraries.spring
	testCompile libraries.spring_test
	compile 'com.mchange:c3p0:0.9.5-pre3'
	compile 'org.hibernate:hibernate-entitymanager:4.3.0.Beta3'
	compile 'org.postgresql:postgresql:9.2-1003-jdbc4'
	compile 'org.jadira.usertype:usertype.core:3.1.0.CR8'
	
	compile 'org.quartz-scheduler:quartz:2.2.0'
	compile 'org.springframework.batch:spring-batch-infrastructure:2.2.1.RELEASE'
	testCompile 'org.springframework.batch:spring-batch-test:2.2.1.RELEASE'
	
	compile 'org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT'
	compile 'org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT'
	
	compile 'org.soluvas:org.soluvas.web.site:2.1.0-SNAPSHOT'
	
	compile project(':twitter')
}

configurations {
	all*.exclude module: 'commons-logging'
}

eclipse {
	classpath {
		file {

      //if you want to mess with the resulting XML in whatever way you fancy
      withXml {
        def node = it.asNode()
        node.appendNode('xml', 'is what I love')
      }

      //closure executed after .classpath content is loaded from existing file
      //but before gradle build information is merged
      beforeMerged { classpath ->
        //you can tinker with the Classpath here
      }

      //closure executed after .classpath content is loaded from existing file
      //and after gradle build information is merged
      whenMerged { classpath ->
        //you can tinker with the Classpath here
		classpath.entries.add "../twitter"		  
      }			
	}
}

project.eclipseClasspath {
	whenConfigured { classpath ->
		
	}
}